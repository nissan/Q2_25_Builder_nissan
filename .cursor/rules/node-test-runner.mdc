---
description: 
globs: 
alwaysApply: false
---
# Node.js Test Runner Guidelines

## Key Points
- **Use Node.js Test Runner**: Always use the built-in Node.js test runner instead of Mocha and Chai
- **Modern Approach**: Node.js test runner provides native testing capabilities without external dependencies
- **Compatible with TypeScript**: Works well with TypeScript projects through tsx
- **Built-in Performance**: Better performance as it's built into Node.js
- **Native ESM Support**: First-class support for ES Modules
- **Anchor Integration**: Seamlessly works with Anchor projects

## Implementation Guide

1. Replace Mocha/Chai dependencies with Node.js test runner:

```json
// package.json
{
  "scripts": {
    "test": "node --test",
    "test:watch": "node --test --watch",
    "test:coverage": "node --test --experimental-test-coverage"
  }
}
```

2. Add TypeScript support if needed:

```json
// package.json
{
  "scripts": {
    "test": "node --import tsx --test tests/**/*.ts",
    "test:watch": "node --import tsx --test --watch tests/**/*.ts",
    "test:coverage": "node --import tsx --test --experimental-test-coverage"
  },
  "devDependencies": {
    "tsx": "^4.7.1",
    "@types/node": "latest"
  }
}
```

3. Update tsconfig.json for Node.js test runner:

```json
{
  "compilerOptions": {
    "types": ["node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2022", "dom"],
    "module": "commonjs",
    "target": "es2022",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true
  }
}
```

4. For Anchor projects:

a. Update Anchor.toml to use Node.js test runner:
```toml
[scripts]
test = "yarn test"  # This will use the Node.js test runner configuration from package.json
```

b. Remove Mocha/Chai related dependencies from package.json:
```json
// ❌ REMOVE these from devDependencies
{
  "@types/chai": "^4.3.0",
  "@types/mocha": "^9.0.0",
  "chai": "^4.3.4",
  "mocha": "^9.0.3",
  "ts-mocha": "^10.0.0"
}
```

c. Update Anchor test files to use Node.js assertions:
```typescript
// ❌ AVOID: Old Mocha/Chai pattern for Anchor tests
import { expect } from 'chai';
import { describe, it } from 'mocha';

// ✅ USE: Node.js test runner pattern for Anchor tests
import { describe, test } from "node:test";
import assert from "node:assert/strict";
import * as anchor from "@coral-xyz/anchor";

describe("My Anchor Program", async () => {
  // Configure the client to use the local cluster
  anchor.setProvider(anchor.AnchorProvider.env());
  const program = anchor.workspace.myProgram as Program<MyProgram>;

  test("Initialize!", async () => {
    const tx = await program.methods.initialize().rpc();
    assert.ok(tx, "Transaction should be defined");
  });
});
```

## Test Structure

### Basic Test Example
```typescript
// ❌ AVOID: Old Mocha/Chai pattern
import { expect } from 'chai';
import { describe, it } from 'mocha';

describe('Calculator', () => {
  it('should add two numbers', () => {
    expect(1 + 1).to.equal(2);
  });
});

// ✅ USE: Node.js test runner pattern
import { describe, it } from 'node:test';
import assert from 'node:assert/strict';

describe('Calculator', () => {
  it('should add two numbers', () => {
    assert.strictEqual(1 + 1, 2);
  });
});
```

### Async Tests
```typescript
// ✅ USE: Async test with Node.js test runner
import { describe, it } from 'node:test';
import assert from 'node:assert/strict';

describe('Async operations', () => {
  it('should handle async operations', async () => {
    const result = await someAsyncFunction();
    assert.strictEqual(result, expectedValue);
  });
});
```

### Setup and Teardown
```typescript
// ✅ USE: Setup and teardown with Node.js test runner
import { describe, it, beforeEach, afterEach } from 'node:test';

describe('Database tests', () => {
  beforeEach(async () => {
    // Setup test database
  });
  
  afterEach(async () => {
    // Clean up test database
  });
  
  it('should insert a record', async () => {
    // Test implementation
  });
});
```

### Mocking
```typescript
// ❌ AVOID: Using Sinon for mocking
import sinon from 'sinon';
const stub = sinon.stub(object, 'method').returns(value);

// ✅ USE: Node.js test runner mocking
import { mock } from 'node:test';
const mockFn = mock.fn((arg) => 'mocked result');
// or
const mockObject = mock.method(object, 'method', () => 'mocked result');
```

### Subtests and Test Organization
```typescript
// ✅ USE: Nested tests for better organization
import { describe, it } from 'node:test';
import assert from 'node:assert/strict';

describe('User Service', () => {
  describe('registration', () => {
    it('should create new user', async () => {
      // Test implementation
    });

    it('should validate email', async () => {
      // Test implementation
    });
  });

  describe('authentication', () => {
    it('should login user', async () => {
      // Test implementation
    });

    it('should handle invalid credentials', async () => {
      // Test implementation
    });
  });
});
```

### Custom Assertions
```typescript
// ❌ AVOID: Chai custom assertions
import { expect } from 'chai';
expect(response).to.have.status(200);

// ✅ USE: Node.js assert with custom messages
import assert from 'node:assert/strict';
assert.equal(response.status, 200, 'Expected successful response status');

// Create reusable custom assertions
function assertSuccessResponse(response) {
  assert.equal(response.status, 200, 'Expected successful response');
  assert.equal(typeof response.data, 'object', 'Expected response data to be an object');
}
``` 